// Generated by CoffeeScript 1.9.2
(function() {
  var DateTime, data, isNull, setup, should;

  should = require('should');

  setup = require('../../setup');

  data = require('./data');

  isNull = require('../../../lib/util/util').isNull;

  DateTime = require('../../../lib/datatypes/datetime').DateTime;

  describe('FromString', function() {
    this.beforeEach(function() {
      return setup(this, data);
    });
    it("should convert 'str' to 'str'", function() {
      return this.stringStr.exec(this.ctx).should.equal("str");
    });
    it("should convert null to null", function() {
      return isNull(this.stringNull.exec(this.ctx)).should.equal(true);
    });
    it("should convert 'true' to true", function() {
      return this.boolTrue.exec(this.ctx).should.equal(true);
    });
    it("should convert 'false' to false", function() {
      return this.boolFalse.exec(this.ctx).should.equal(false);
    });
    it("should convert '10.2' to Decimal", function() {
      return this.decimalValid.exec(this.ctx).should.equal(10.2);
    });
    it("should be null trying to convert 'abc' to Decimal", function() {
      return should(this.decimalInvalid.exec(this.ctx)).be["null"]();
    });
    it("should convert '10' to Integer", function() {
      return this.integerValid.exec(this.ctx).should.equal(10);
    });
    it("should convert '10.2' to Integer 10", function() {
      return this.integerDropDecimal.exec(this.ctx).should.equal(10);
    });
    it("should be null trying to convert 'abc' to Integer", function() {
      return should(this.integerInvalid.exec(this.ctx)).be["null"]();
    });
    it("should convert \"10 'A'\" to Quantity", function() {
      var quantity;
      quantity = this.quantityStr.exec(this.ctx);
      quantity.value.should.equal(10);
      return quantity.unit.should.equal("A");
    });
    it("should convert \"+10 'A'\" to Quantity", function() {
      var quantity;
      quantity = this.posQuantityStr.exec(this.ctx);
      quantity.value.should.equal(10);
      return quantity.unit.should.equal("A");
    });
    it("should convert \"-10 'A'\" to Quantity", function() {
      var quantity;
      quantity = this.negQuantityStr.exec(this.ctx);
      quantity.value.should.equal(-10);
      return quantity.unit.should.equal("A");
    });
    it("should convert \"10.0'mA'\" to Quantity", function() {
      var quantity;
      quantity = this.quantityStrDecimal.exec(this.ctx);
      quantity.value.should.equal(10.0);
      return quantity.unit.should.equal("mA");
    });
    it("should convert '2015-01-02' to DateTime", function() {
      var date;
      date = this.dateTimeStr.exec(this.ctx);
      date.year.should.equal(2015);
      date.month.should.equal(1);
      date.day.should.equal(2);
      return date.isDateTime.should.equal["true"];
    });
    it("should convert '2015-01-02' to Date", function() {
      var date;
      date = this.dateStr.exec(this.ctx);
      date.year.should.equal(2015);
      date.month.should.equal(1);
      date.day.should.equal(2);
      return date.isDate.should.equal["true"];
    });
    it('should be null if cannot convert', function() {
      return should(this.nullConvert.exec(this.ctx)).be["null"]();
    });
    it('should convert DateTime string with Z', function() {
      var expectedDateTime;
      expectedDateTime = new DateTime(2014, 1, 1, 14, 30, 0, 0, 0);
      return this.zDateTime.exec(this.ctx).equals(expectedDateTime).should.be["true"]();
    });
    it('should convert DateTime string with timezone offset', function() {
      var expectedDateTime;
      expectedDateTime = new DateTime(2014, 1, 1, 14, 30, 0, 0, -7);
      return this.timezoneDateTime.exec(this.ctx).equals(expectedDateTime).should.be["true"]();
    });
    it('should convert Time string with Z', function() {
      var expectedTime;
      expectedTime = new DateTime(0, 1, 1, 14, 30, 0, 0, 0);
      return this.zTime.exec(this.ctx).equals(expectedTime).should.be["true"]();
    });
    return it('should convert Time string with timezone offset', function() {
      var expectedTime;
      expectedTime = new DateTime(0, 1, 1, 14, 30, 0, 0, -7);
      return this.timezoneTime.exec(this.ctx).equals(expectedTime).should.be["true"]();
    });
  });

  describe('FromInteger', function() {
    this.beforeEach(function() {
      return setup(this, data);
    });
    it("should convert 10 to '10'", function() {
      return this.string10.exec(this.ctx).should.equal("10");
    });
    it("should convert 10 to 10.0", function() {
      return this.decimal10.exec(this.ctx).should.equal(10.0);
    });
    it("should convert null to null", function() {
      return isNull(this.intNull.exec(this.ctx)).should.equal(true);
    });
    return it("should convert 10 to 10", function() {
      return this.intInt.exec(this.ctx).should.equal(10);
    });
  });

  describe('FromQuantity', function() {
    this.beforeEach(function() {
      return setup(this, data);
    });
    it("should convert \"10 'A'\" to \"10 'A'\"", function() {
      return this.quantityStr.exec(this.ctx).should.equal("10 'A'");
    });
    it("should convert \"+10 'A'\" to \"10 'A'\"", function() {
      return this.posQuantityStr.exec(this.ctx).should.equal("10 'A'");
    });
    it("should convert \"-10 'A'\" to \"10 'A'\"", function() {
      return this.negQuantityStr.exec(this.ctx).should.equal("-10 'A'");
    });
    return it("should convert \"10 'A'\" to \"10 'A'\"", function() {
      var quantity;
      quantity = this.quantityQuantity.exec(this.ctx);
      quantity.value.should.equal(10);
      return quantity.unit.should.equal('A');
    });
  });

  describe('FromBoolean', function() {
    this.beforeEach(function() {
      return setup(this, data);
    });
    it("should convert true to 'true'", function() {
      return this.booleanTrueStr.exec(this.ctx).should.equal("true");
    });
    it("should convert false to 'false'", function() {
      return this.booleanFalseStr.exec(this.ctx).should.equal("false");
    });
    it("should convert true to true", function() {
      return this.booleanTrueBool.exec(this.ctx).should.equal(true);
    });
    return it("should convert false to false", function() {
      return this.booleanFalseBool.exec(this.ctx).should.equal(false);
    });
  });

  describe('FromDateTime', function() {
    this.beforeEach(function() {
      return setup(this, data);
    });
    it("should convert @2015-01-02T12:01:02.321-06:00 to '2015-01-02T12:01:02.321-06:00'", function() {
      return this.dateTimeToStr.exec(this.ctx).should.equal("2015-01-02T12:01:02.321-06:00");
    });
    it("should convert @2015-01-02T12:01:02.321-06:00 to Date", function() {
      var date, field, i, len, ref, results;
      date = this.dateTimeToDate.exec(this.ctx);
      date.isDate.should.be["true"];
      date.year.should.equal(2015);
      date.month.should.equal(1);
      date.day.should.equal(2);
      ref = ['hour', 'minute', 'second', 'millisecond', 'timezoneOffset'];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        results.push(should.not.exist(date[field]));
      }
      return results;
    });
    return it("should convert @2015-01-02T12:01:02.321-06:00 to DateTime", function() {
      var dateTime;
      dateTime = this.dateTimeToDateTime.exec(this.ctx);
      dateTime.isDateTime.should.be["true"];
      dateTime.year.should.equal(2015);
      dateTime.month.should.equal(1);
      dateTime.day.should.equal(2);
      dateTime.hour.should.equal(12);
      dateTime.minute.should.equal(1);
      dateTime.second.should.equal(2);
      dateTime.millisecond.should.equal(321);
      return dateTime.timezoneOffset.should.equal(-6);
    });
  });

  describe('FromDate', function() {
    this.beforeEach(function() {
      return setup(this, data);
    });
    it("should convert @2015-01-01 to DateTime with 0 for time components", function() {
      var dateTime;
      dateTime = this.dateYMDToDateTime.exec(this.ctx);
      dateTime.year.should.equal(2015);
      dateTime.month.should.equal(1);
      dateTime.day.should.equal(1);
      dateTime.hour.should.equal(0);
      dateTime.minute.should.equal(0);
      dateTime.second.should.equal(0);
      dateTime.millisecond.should.equal(0);
      dateTime.timezoneOffset.should.equal(this.ctx.getTimezoneOffset());
      return dateTime.isDateTime.should.equal["true"];
    });
    it("should convert @2015-01 to DateTime with null for day and time components", function() {
      var dateTime, field, i, j, len, len1, ref, ref1;
      dateTime = this.dateYMToDateTime.exec(this.ctx);
      dateTime.year.should.equal(2015);
      dateTime.month.should.equal(1);
      should.not.exist(dateTime.day);
      ref = ['hour', 'minute', 'second', 'millisecond'];
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        should.not.exist(dateTime[field]);
      }
      dateTime.timezoneOffset.should.equal(this.ctx.getTimezoneOffset());
      dateTime.isDateTime.should.equal["true"];
      it("should convert @2015-01 to DateTime with null for day, month, and time components", function() {});
      dateTime = this.dateYToDateTime.exec(this.ctx);
      dateTime.year.should.equal(2015);
      should.not.exist(dateTime.month);
      should.not.exist(dateTime.day);
      ref1 = ['hour', 'minute', 'second', 'millisecond'];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        field = ref1[j];
        should.not.exist(dateTime[field]);
      }
      dateTime.timezoneOffset.should.equal(this.ctx.getTimezoneOffset());
      return dateTime.isDateTime.should.equal["true"];
    });
    it("should convert @2015-01-01 to Date", function() {
      var date, field, i, len, ref;
      date = this.dateToDate.exec(this.ctx);
      date.year.should.equal(2015);
      date.month.should.equal(1);
      date.day.should.equal(1);
      ref = ['hour', 'minute', 'second', 'millisecond', 'timezoneOffset'];
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        should.not.exist(date[field]);
      }
      return date.isDate.should.equal["true"];
    });
    return it("should convert @2015-01-01 to '2015-01-01'", function() {
      return this.dateToStr.exec(this.ctx).should.equal("2015-01-01");
    });
  });

  describe('FromTime', function() {
    this.beforeEach(function() {
      return setup(this, data);
    });
    it.skip("should convert @T11:57 to '11:57'", function() {
      return this.timeStr.exec(this.ctx).should.equal("11:57");
    });
    return it.skip("should convert @T11:57 to @11:57", function() {
      var time;
      time = this.timeTime.exec(this.ctx);
      time.hour.should.equal(11);
      return time.minute.should.equal(57);
    });
  });

  describe('FromCode', function() {
    this.beforeEach(function() {
      return setup(this, data);
    });
    it.skip("should convert hepB to a concept", function() {
      var concept;
      return concept = this.codeConcept.exec(this.ctx);
    });
    return it.skip("should convert hepB to a code", function() {
      var code;
      return code = this.codeCode.exec(this.ctx);
    });
  });

  describe('ToDecimal', function() {
    this.beforeEach(function() {
      return setup(this, data);
    });
    it("should convert '0.0' to 0.0", function() {
      return this.noSign.exec(this.ctx).should.equal(0.0);
    });
    it("should convert '+1.1' to 1.1", function() {
      return this.positiveSign.exec(this.ctx).should.equal(1.1);
    });
    it("should convert '-1.1' to -1.1", function() {
      return this.negativeSign.exec(this.ctx).should.equal(-1.1);
    });
    it("should truncate decimal to 8 digits after decimal point", function() {
      return this.tooPrecise.exec(this.ctx).should.equal(0.44444444);
    });
    it("should be null for decimal that is above max decimal value", function() {
      return should(this.tooLargeDec.exec(this.ctx)).be["null"]();
    });
    it("should return null for decimal that is below min decimal value", function() {
      return should(this.tooSmallDec.exec(this.ctx)).be["null"]();
    });
    it("should convert null to null", function() {
      return should(this.nullDecimal.exec(this.ctx)).not.exist;
    });
    return it.skip("should be null if wrong format (+.1)", function() {
      return should(this.wrongFormat.exec(this.ctx)).be["null"]();
    });
  });

  describe('ToInteger', function() {
    this.beforeEach(function() {
      return setup(this, data);
    });
    it("should return positive integer without polarity sign", function() {
      return this.noSign.exec(this.ctx).should.equal(12345);
    });
    it("should return positive integer with polarity sign", function() {
      return this.positiveSign.exec(this.ctx).should.equal(12345);
    });
    it("should return negative integer", function() {
      return this.negativeSign.exec(this.ctx).should.equal(-12345);
    });
    it("should return null if integer larger than max", function() {
      return should(this.tooLargeInt.exec(this.ctx)).be["null"]();
    });
    return it("should return null if integer smaller than min", function() {
      return should(this.tooSmallInt.exec(this.ctx)).be["null"]();
    });
  });

  describe('ToQuantity', function() {
    this.beforeEach(function() {
      return setup(this, data);
    });
    it("should be null if string is not formatted properly", function() {
      return should(this.wrongFormatQuantity.exec(this.ctx)).be["null"]();
    });
    it("should be null if invalid positive Quantity", function() {
      return should(this.tooLargeQuantity.exec(this.ctx)).be["null"]();
    });
    it("should be null if invalid negative Quantity", function() {
      return should(this.tooSmallQuantity.exec(this.ctx)).be["null"]();
    });
    return it("should return null for null argument", function() {
      return should(this.nullArg.exec(this.ctx)).not.exist;
    });
  });

  describe('ToTime', function() {
    this.beforeEach(function() {
      return setup(this, data);
    });
    it("should return null if arg is null", function() {
      return should(this.nullArgTime.exec(this.ctx)).not.exist;
    });
    it("should be null for incorrect format", function() {
      return should(this.incorrectFormatTime.exec(this.ctx)).be["null"]();
    });
    it("should be null for invalid time-of-day", function() {
      return should(this.invalidTime.exec(this.ctx)).be["null"]();
    });
    it("should work with for Thh", function() {
      var expectedDateTime;
      expectedDateTime = new DateTime(0, 1, 1, 2);
      return this.timeH.exec(this.ctx).equals(expectedDateTime).should.be["true"]();
    });
    it("should work with for Thh:mm", function() {
      var expectedDateTime;
      expectedDateTime = new DateTime(0, 1, 1, 2, 4);
      return this.timeHM.exec(this.ctx).equals(expectedDateTime).should.be["true"]();
    });
    it("should work with for Thh:mm:ss", function() {
      var expectedDateTime;
      expectedDateTime = new DateTime(0, 1, 1, 2, 4, 59);
      return this.timeHMS.exec(this.ctx).equals(expectedDateTime).should.be["true"]();
    });
    it("should work with for Thh:mm:ss.fff", function() {
      var expectedDateTime;
      expectedDateTime = new DateTime(0, 1, 1, 2, 4, 59, 123);
      return this.timeHMSMs.exec(this.ctx).equals(expectedDateTime).should.be["true"]();
    });
    it("should work with for Thh:mm:ss.fffZ", function() {
      var expectedDateTime;
      expectedDateTime = new DateTime(0, 1, 1, 2, 4, 59, 123, 0);
      return this.timeHMSMsZ.exec(this.ctx).equals(expectedDateTime).should.be["true"]();
    });
    it("should work with for Thh:mm:ss.fff+hh:mm", function() {
      var expectedDateTime;
      expectedDateTime = new DateTime(0, 1, 1, 2, 4, 59, 123, 1);
      return this.timeHMSMsTimezone.exec(this.ctx).equals(expectedDateTime).should.be["true"]();
    });
    it("should work with for Thh:mm:ss.fff+hh", function() {
      var expectedDateTime;
      expectedDateTime = new DateTime(0, 1, 1, 2, 4, 59, 123, 1);
      return this.timeHMSMsFullTimezone.exec(this.ctx).equals(expectedDateTime).should.be["true"]();
    });
    it("should be null for hour over 24", function() {
      return should(this.hourTooHigh.exec(this.ctx)).be["null"]();
    });
    it("should be null for minute over 59", function() {
      return should(this.minuteTooHigh.exec(this.ctx)).be["null"]();
    });
    return it("should be null for second over 59", function() {
      return should(this.secondTooHigh.exec(this.ctx)).be["null"]();
    });
  });

  describe('ToBoolean', function() {
    this.beforeEach(function() {
      return setup(this, data);
    });
    it("should return true for TRUE", function() {
      return should(this.upperCaseTrue.exec(this.ctx)).be["true"];
    });
    it("should return true for FALSE", function() {
      return should(this.upperCaseFalse.exec(this.ctx)).be["false"];
    });
    it("should return true for true", function() {
      return should(this.lowerCaseT.exec(this.ctx)).be["true"];
    });
    it("should return true for false", function() {
      return should(this.lowerCaseF.exec(this.ctx)).be["false"];
    });
    it("should return true for T", function() {
      return should(this.upperCaseT.exec(this.ctx)).be["true"];
    });
    return it("should return false for F", function() {
      return should(this.upperCaseF.exec(this.ctx)).be["false"];
    });
  });

}).call(this);

//# sourceMappingURL=test.js.map
