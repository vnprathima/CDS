// Generated by CoffeeScript 1.9.2
(function() {
  var Quantity, Ratio, setup, should;

  should = require('should');

  setup = require('../../setup');

  Quantity = require('../../../lib/elm/quantity').Quantity;

  Ratio = require('../../../lib/elm/ratio').Ratio;

  describe('Ratio', function() {
    it('should allow creation of Ratio with two valid quantities with units', function() {
      return should.doesNotThrow(function() {
        var denominator, numerator;
        numerator = new Quantity({
          unit: "mm",
          value: 42.424242
        });
        denominator = new Quantity({
          unit: "mm",
          value: 33.3333
        });
        return new Ratio({
          numerator: numerator,
          denominator: denominator
        });
      });
    });
    it('should allow creation of Ratio with two valid quantities without units', function() {
      return should.doesNotThrow(function() {
        var denominator, numerator;
        numerator = new Quantity({
          value: 42.424242
        });
        denominator = new Quantity({
          value: 33.3333
        });
        return new Ratio({
          numerator: numerator,
          denominator: denominator
        });
      });
    });
    it('should throw error when creating ratio of non quantity numerator', function() {
      return should.throws(function() {
        var denominator, numerator;
        numerator = {
          unit: "mm",
          value: "NOT_A_NUMBER"
        };
        denominator = new Quantity({
          unit: "mm",
          value: 33.3333
        });
        return new Ratio({
          numerator: numerator,
          denominator: denominator
        });
      });
    });
    it('should throw error when creating ratio of non quantity denominator', function() {
      return should.throws(function() {
        var denominator, numerator;
        numerator = new Quantity({
          unit: "mm",
          value: 42.424242
        });
        denominator = {
          unit: "mm",
          value: "NOT_A_NUMBER"
        };
        return new Ratio({
          numerator: numerator,
          denominator: denominator
        });
      });
    });
    it('should throw error when creating ratio with null denominator', function() {
      return should.throws(function() {
        var denominator, numerator;
        numerator = null;
        denominator = new Quantity({
          unit: "mm",
          value: 33.3333
        });
        return new Ratio({
          numerator: numerator,
          denominator: denominator
        });
      });
    });
    it('should throw error when creating ratio with null numerator', function() {
      return should.throws(function() {
        var denominator, numerator;
        numerator = new Quantity({
          unit: "mm",
          value: 42.424242
        });
        denominator = null;
        return new Ratio({
          numerator: numerator,
          denominator: denominator
        });
      });
    });
    it('should return a properly formatted string representing a ratio', function() {
      var denominator, numerator, ratio;
      numerator = new Quantity({
        unit: "mm",
        value: 42.424242
      });
      denominator = new Quantity({
        unit: "mm",
        value: 33.3333
      });
      ratio = new Ratio({
        numerator: numerator,
        denominator: denominator
      });
      return ratio.toString().should.equal("42.424242 'mm' : 33.3333 'mm'");
    });
    it('should set numerator and denominator from Quantities', function() {
      var denominator, numerator, ratio;
      numerator = new Quantity({
        unit: "mm",
        value: 42.424242
      });
      denominator = new Quantity({
        unit: "mm",
        value: 33.3333
      });
      ratio = new Ratio({
        numerator: numerator,
        denominator: denominator
      });
      ratio.numerator.toString().should.equal("42.424242 'mm'");
      return ratio.denominator.toString().should.equal("33.3333 'mm'");
    });
    it('should set numerator and denominator from Quantity hashes', function() {
      var denominator, numerator, ratio;
      numerator = {
        unit: "mm",
        value: 42.424242
      };
      denominator = {
        unit: "mm",
        value: 33.3333
      };
      ratio = new Ratio({
        numerator: numerator,
        denominator: denominator
      });
      ratio.numerator.toString().should.equal("42.424242 'mm'");
      return ratio.denominator.toString().should.equal("33.3333 'mm'");
    });
    return it('should return a properly formatted string representing a ratio from Quantity hashes', function() {
      var denominator, numerator, ratio;
      numerator = {
        unit: "mm",
        value: 42.424242
      };
      denominator = {
        unit: "mm",
        value: 33.3333
      };
      ratio = new Ratio({
        numerator: numerator,
        denominator: denominator
      });
      return ratio.toString().should.equal("42.424242 'mm' : 33.3333 'mm'");
    });
  });

  it('should return true for equal ratios', function() {
    var denominator, numerator, ratio1, ratio2;
    numerator = new Quantity({
      unit: "mm",
      value: 33.3333
    });
    denominator = new Quantity({
      unit: "mm",
      value: 33.3333
    });
    ratio1 = new Ratio({
      numerator: numerator,
      denominator: denominator
    });
    ratio2 = new Ratio({
      numerator: numerator,
      denominator: denominator
    });
    return ratio1.equals(ratio2).should.equal(true);
  });

  it('should return true for equal ratios with different numerators and denominators', function() {
    var denominator1, denominator2, numerator1, numerator2, ratio1, ratio2;
    numerator1 = new Quantity({
      unit: "mm",
      value: 33.3333
    });
    denominator1 = new Quantity({
      unit: "mm",
      value: 66.6666
    });
    numerator2 = new Quantity({
      unit: "mm",
      value: 10.1
    });
    denominator2 = new Quantity({
      unit: "mm",
      value: 20.2
    });
    ratio1 = new Ratio({
      numerator: numerator1,
      denominator: denominator1
    });
    ratio2 = new Ratio({
      numerator: numerator2,
      denominator: denominator2
    });
    return ratio1.equals(ratio2).should.equal(true);
  });

  it('should return true for equivalent ratios with different numerators and denominators', function() {
    var denominator1, denominator2, numerator1, numerator2, ratio1, ratio2;
    numerator1 = new Quantity({
      unit: "mm",
      value: 33.3333
    });
    denominator1 = new Quantity({
      unit: "mm",
      value: 66.6666
    });
    numerator2 = new Quantity({
      unit: "mm",
      value: 10.1
    });
    denominator2 = new Quantity({
      unit: "mm",
      value: 20.2
    });
    ratio1 = new Ratio({
      numerator: numerator1,
      denominator: denominator1
    });
    ratio2 = new Ratio({
      numerator: numerator2,
      denominator: denominator2
    });
    return ratio1.equivalent(ratio2).should.equal(true);
  });

  it('should return true for equal ratios with comparable units', function() {
    var denominator1, denominator2, numerator1, numerator2, ratio1, ratio2;
    numerator1 = new Quantity({
      unit: "mm",
      value: 1
    });
    denominator1 = new Quantity({
      unit: "mm",
      value: 1000
    });
    numerator2 = new Quantity({
      unit: "m",
      value: .001
    });
    denominator2 = new Quantity({
      unit: "m",
      value: 1
    });
    ratio1 = new Ratio({
      numerator: numerator1,
      denominator: denominator1
    });
    ratio2 = new Ratio({
      numerator: numerator2,
      denominator: denominator2
    });
    return ratio1.equals(ratio2).should.equal(true);
  });

  it('should return true for equivalent ratios with comparable units', function() {
    var denominator1, denominator2, numerator1, numerator2, ratio1, ratio2;
    numerator1 = new Quantity({
      unit: "mm",
      value: 1
    });
    denominator1 = new Quantity({
      unit: "mm",
      value: 1000
    });
    numerator2 = new Quantity({
      unit: "m",
      value: .001
    });
    denominator2 = new Quantity({
      unit: "m",
      value: 1
    });
    ratio1 = new Ratio({
      numerator: numerator1,
      denominator: denominator1
    });
    ratio2 = new Ratio({
      numerator: numerator2,
      denominator: denominator2
    });
    return ratio1.equals(ratio2).should.equal(true);
  });

  it('should return false for non equal ratios with incomparable units', function() {
    var denominator1, denominator2, numerator1, numerator2, ratio1, ratio2;
    numerator1 = new Quantity({
      unit: "mm",
      value: 1
    });
    denominator1 = new Quantity({
      unit: "mm",
      value: 1000
    });
    numerator2 = new Quantity({
      unit: "m",
      value: .001
    });
    denominator2 = new Quantity({
      unit: "cm",
      value: 1
    });
    ratio1 = new Ratio({
      numerator: numerator1,
      denominator: denominator1
    });
    ratio2 = new Ratio({
      numerator: numerator2,
      denominator: denominator2
    });
    return ratio1.equals(ratio2).should.equal(false);
  });

  it('should return false for non equivalent ratios with incomparable units', function() {
    var denominator1, denominator2, numerator1, numerator2, ratio1, ratio2;
    numerator1 = new Quantity({
      unit: "mm",
      value: 1
    });
    denominator1 = new Quantity({
      unit: "mm",
      value: 1000
    });
    numerator2 = new Quantity({
      unit: "m",
      value: .001
    });
    denominator2 = new Quantity({
      unit: "cm",
      value: 1
    });
    ratio1 = new Ratio({
      numerator: numerator1,
      denominator: denominator1
    });
    ratio2 = new Ratio({
      numerator: numerator2,
      denominator: denominator2
    });
    return ratio1.equivalent(ratio2).should.equal(false);
  });

}).call(this);

//# sourceMappingURL=test.js.map
